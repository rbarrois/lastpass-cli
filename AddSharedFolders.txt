Shared Folder Addition
----------------------

POST to /share.php with the following information.

param: id 
param: newusername
param: newhash
param: sharekey
param: sharename
param: name
param: wxsessid
param: token
param: xmlr

PARAM ENCODINGS AND DESCRIPTION
	- id=0 
	- newusername is the creators username, followed by hyphen, followed by the shared folders plaintext name
	- name is the plaintext name of the folder being added
	- sharekey is the the new sharedfolder's master key (which is used to encrypt the things in the shared folder) encrypted with your public key.
	- sharekey (after being encrypted with your public key), should be a hexadecimal string.
	- sharename is the ciphertext name of the folder being added, encrypted with the sharekey
	- newhash is your SharedFolders hash. This is your sharekey (pre RSA encryption) run through PBKDF2-SHA2 for a number of iterations
	- token is a base64 URI encoded CSRF authenticity token available in session->token.
	- wxsessid is available in session->sessionid.
	- xmlr=1
Ciphertexts
	- All (symmetric key encrypted) Ciphertexts are actually two things, an IV and the Ciphertext.
	- All Ciphertexts should be encrypted with AES in CBC mode.
	- Ciphertexts should be a string that begins with an exclamation point. The exclamation point is followed by the base64
	  encoded IV, which should be randomly generated bytes. The IV is followed by a pipe (or vertical bar..whatever you want
	  to call it). The encrypted data is base64 encoded and follows the pipe.
	- IVs should be unique and randomly generated per Ciphertext
   

Explanation
	To get to the finished product where you have all parameters ready to submit you need to do the following.
	1) Get your own public key, as lastpass-cli doesn't have it. You can do this with the below public key API.
	2) Generate a new password (a bunch of bytes, usually of password length 16-20 characters) and hash for the SharedFolder. 
	   Conceptually a sharedfolder is a user.
	3) Encrypt the newly generated SharedFolder password with your own public key (This is sharing with yourself).

Key Explanation
	To go from nothing to your hash and sharekey you should do the following.
	1) Generate a random password.
	2) Generate the sharekey. PBKDF2-SHA256() where the "password" and "salt" are the randmly generated password and newusername. 
	   The defualt # of iterations is 5000.
	   The result should be hexadecimal. Before uploading, RSA encrypt the sharekey and ensure it is hexencoded.
	3) Generate your newhash. This is PBKDF2-SHA256 usually using default of 5000 iterations. The salt is your randomly generated password, 
	   the "password" is your newly generated key.

RESPONSE
You should get an XML Response that looks like this if it is successful.
	<xmlresponse>
		<result rc="ok" id="<SHAREDFOLDERID>" uid="<SHAREDFOLDER USERID>"></result>
	</xmlresponse>

If it is not successful you will get an XML Response that looks like this.
	<xmlresponse>
		<result rc="<THE ERROR MESSAGE>"></result>
	</xmlresponse>

Getting your own Public Key
---------------------------
GET to /share.php with the following Query String Params
param: getpublickey
param: uid


PARAM ENCODINGS AND DESCRIPTION
-getpublickey=1
-uid is a JSON Object
	{
		"<Your Email Address>":	{
						"type":"",
						"id":""
					}
    
	}

RESPONSE
JSON Object with the following if your query was successful.

	{
		"Success":true, 
		"pubkey0":"<PUBKEY>",
		"uid0":	"<User's uid>",
		"username0": "<Your email addr>",
	}


